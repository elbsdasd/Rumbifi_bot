from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, ConversationHandler # Importar ConversationHandler
import config

# --- TECLADOS COMUNES ---
def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üóìÔ∏è Planificar Mi D√≠a", callback_data=config.CB_PLAN_MAIN_MENU)],
        [InlineKeyboardButton("üí™ Bienestar F√≠sico y Mental", callback_data=config.CB_WB_MAIN_MENU)],
        [InlineKeyboardButton("üí∞ Mis Finanzas", callback_data=config.CB_FIN_MAIN_MENU)],
        [InlineKeyboardButton("üìä Ver Mi Progreso", callback_data=config.CB_PROG_MAIN_MENU)],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_back_to_main_menu_button() -> InlineKeyboardButton:
    return InlineKeyboardButton("‚¨ÖÔ∏è Volver al Men√∫ Principal", callback_data=config.CB_MAIN_MENU)

def get_back_button(callback_data_target: str, text: str = "‚¨ÖÔ∏è Volver") -> InlineKeyboardButton:
    return InlineKeyboardButton(text, callback_data=callback_data_target)


# --- FUNCIONES DE UTILIDAD PARA HANDLERS ---
def cancel_conversation_to_main_menu(update: Update, context: CallbackContext, flow_specific_cleanup_keys: list = None) -> int:
    """
    Funci√≥n gen√©rica para cancelar una conversaci√≥n y volver al men√∫ principal.
    Limpia claves espec√≠ficas del flujo en user_data.
    """
    user = update.effective_user
    cancel_message = f"Operaci√≥n cancelada, {user.first_name}. Volviendo al men√∫ principal."

    if update.message:
        update.message.reply_text(cancel_message)
    elif update.callback_query:
        try:
            update.callback_query.answer("Operaci√≥n cancelada.")
            # Es mejor enviar un nuevo mensaje para el men√∫ que editar,
            # ya que el mensaje original podr√≠a no ser adecuado para el men√∫.
            # update.callback_query.edit_message_text(text=cancel_message) # Evitar esto
        except Exception:
            pass # No importa si falla el answer o edit

    # Limpiar datos de contexto espec√≠ficos del flujo
    if flow_specific_cleanup_keys:
        for key in flow_specific_cleanup_keys:
            if key in context.user_data:
                del context.user_data[key]
    
    # Tambi√©n limpiar claves gen√©ricas si existen
    generic_keys_to_clear = ['current_flow_data', 'temp_messages']
    for key in generic_keys_to_clear:
        if key in context.user_data:
            del context.user_data[key]
            
    # Enviar men√∫ principal despu√©s de cancelar
    # Necesitamos importar la funci√≥n send_main_menu de start_access.py
    # Esto puede crear una dependencia circular si no se maneja con cuidado.
    # Una mejor pr√°ctica es que main.py maneje el env√≠o del men√∫ principal
    # o que esta funci√≥n devuelva un estado especial que main.py interprete.
    # Por ahora, para simplificar, asumimos que se puede llamar a una funci√≥n que env√≠e el men√∫.
    # O que simplemente terminamos la conversaci√≥n y el usuario usa /menu o /start.

    # Para evitar la importaci√≥n circular directa aqu√≠, es mejor que el ConversationHandler
    # que usa esta funci√≥n, en su `fallbacks` o despu√©s de que esta funci√≥n retorne END,
    # llame a la funci√≥n que muestra el men√∫ principal.
    # Por ahora, esta funci√≥n solo se encarga de la limpieza y el mensaje de cancelaci√≥n.
    # El retorno de ConversationHandler.END es lo principal.
    
    # El handler que llama a esta funci√≥n se encargar√° de redirigir al men√∫
    # por ejemplo, haciendo que el ConversationHandler termine y el usuario
    # vuelva a usar /menu, o el ConversationHandler padre tome el control.
    
    # Enviar men√∫ principal como nuevo mensaje
    from .start_access import send_main_menu # Importaci√≥n tard√≠a
    # Verificar si el usuario tiene acceso antes de mostrar el men√∫
    has_access, _ = db_utils.check_user_access(user.id)
    if has_access:
        send_main_menu(update, context, user_id=user.id, message_text="Operaci√≥n cancelada. Aqu√≠ tienes el men√∫ principal:")
    else:
        # Si no tiene acceso, no mostrar men√∫, el check_user_access ya habr√° enviado un mensaje.
        # O enviar un mensaje gen√©rico si es necesario.
        if update.callback_query:
             context.bot.send_message(chat_id=user.id, text="Operaci√≥n cancelada.")
        # El mensaje de no acceso ya se deber√≠a haber manejado por check_user_access.
        
    return ConversationHandler.END